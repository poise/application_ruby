#!/bin/bash
exec 2>&1

function is_unicorn_alive {
    set +e
    if [ -n $1 ] && kill -0 $1 >/dev/null 2>&1; then
        echo "yes"
    fi
    set -e
}
 
echo "Service PID: $$"
 
CUR_PID_FILE=/tmp/unicorn.pid
OLD_PID_FILE=$CUR_PID_FILE.oldbin
 
if [ -e $OLD_PID_FILE ]; then
    OLD_PID=$(cat $OLD_PID_FILE)
    echo "Waiting for existing master ($OLD_PID) to exit"
    while [ -n "$(is_unicorn_alive $OLD_PID)" ]; do
        /bin/echo -n '.'
        sleep 2
    done
fi
 
if [ -e $CUR_PID_FILE ]; then
    CUR_PID=$(cat $CUR_PID_FILE)
    if [ -n "$(is_unicorn_alive $CUR_PID)" ]; then
        echo "Unicorn master already running. PID: $CUR_PID"
        RUNNING=true
    fi
fi
 
if [ ! $RUNNING ]; then
    echo "Starting unicorn"

    # delete if there's a stray unicorn.sock
    if [ -e /var/unicorn.sock ]; then
        rm /tmp/unicorn.sock || true  # this sometimes gets left behind on reboot?
    fi

    cd <%= @options[:app].path %>/current
    <%= node[:runit][:chpst_bin] %> \
      <% if @options[:env_dir] %>-e <%= node[:runit][:sv_dir] %>/<%= @options[:app].application.name %>/env<% end %> \
      -u <%= @options[:app].owner %>:<%= @options[:app].group %> \
      <%= @options[:bundler] ? "#{@options[:bundle_command]} exec" : '' %> \
      <%= @options[:smells_like_rack] ? 'unicorn' : 'unicorn_rails' %> \
      -E <%= @options[:rails_env] %> \
      -c /etc/unicorn/<%= @options[:app].application.name %>.rb \
      -D
    sleep 3
    CUR_PID=$(cat $CUR_PID_FILE)
fi
 
function restart {
    echo "Initialize new master with USR2"
    kill -USR2 $CUR_PID
    # Make runit restart to pick up new unicorn pid
    sleep 2
    echo "Restarting service to capture new pid"
    exit
}
 
function graceful_shutdown {
    echo "Initializing graceful shutdown"
    kill -QUIT $CUR_PID
}
 
function unicorn_interrupted {
    echo "Unicorn process interrupted. Possibly a runit thing?"
}
 
trap restart HUP QUIT USR2 INT
trap graceful_shutdown TERM KILL
trap unicorn_interrupted ALRM
 
echo "Waiting for current master to die. PID: ($CUR_PID)"
while [ -n "$(is_unicorn_alive $CUR_PID)" ]; do
    sleep 2
done
echo "You've killed a unicorn!"
